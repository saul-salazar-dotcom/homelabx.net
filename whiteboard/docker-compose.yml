name: whiteboard

networks:
  proxy:
    external: true

services:
  server:
    image: ghcr.io/toeverything/affine-graphql:stable
    restart: always
    command:
      ['sh', '-c', 'node ./scripts/self-host-predeploy && node ./dist/index.js']
    networks:
      - proxy
      - default
    ports:
      - 1030:3010
      - 5555:5555
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./config:/root/.affine/config # custom configurations
      - ./data_affine:/root/.affine/storage # blob storage
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
    environment:
      - NODE_OPTIONS="--import=./scripts/register.js"
      - AFFINE_CONFIG_PATH=/root/.affine/config
      - REDIS_SERVER_HOST=redis
      - DATABASE_URL=postgres://affine:affine@postgres:5432/affine
      - NODE_ENV=production
      - AFFINE_SERVER_HOST=whiteboard.homelab.com
      - AFFINE_SERVER_PORT=3010
      - AFFINE_SERVER_HTTPS=true
      # Telemetry allows us to collect data on how you use the affine. This data will helps us improve the app and provide better features.
      # Uncomment next line if you wish to quit telemetry.
      # - TELEMETRY_ENABLE=false
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.rule=Host(`whiteboard.homelab.com`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.entrypoints=https"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls=true"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=3010"

  redis:
    image: redis
    restart: always
    volumes:
      - ./data_redis:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres
    restart: always
    volumes:
      - ./data_postgres:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U affine']
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: affine
      POSTGRES_PASSWORD: affine
      POSTGRES_DB: affine
      PGDATA: /var/lib/postgresql/data/pgdata
